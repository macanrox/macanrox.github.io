{"version":3,"sources":["components/Header/Header.js","data/projects.js","components/Projects/Projects.js","components/Contact/Contact.js","components/Main/Main.js","data/social-media-icons.js","components/Footer/Footer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Header","props","toggle","bind","state","isOpen","this","setState","className","Navbar","color","dark","expand","NavbarBrand","src","id","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","href","Component","projects","title","source","description","imageSrc","role","tech","otherTech","Projects","proj","JSON","parse","stringify","project","console","log","Card","CardImg","top","width","alt","CardBody","CardTitle","CardSubtitle","CardText","map","e","techs","Contact","Form","action","method","FormGroup","Label","for","Input","type","name","placeholder","value","Button","Main","p","key","socialButtons","link","library","add","fab","far","Footer","Container","fluid","socialButton","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3c5442d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\nimport './Header.css';\n\nexport default class Header extends Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"site-header\">\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand>\n            <img src=\"https://i.imgur.com/vfQbnuB.jpg\" id=\"profile-pic\"></img>\n            <span className=\"profile-info\">\n              <span id=\"name\">Bresia Prudente</span>\n              <div id=\"career-title\" className=\"text-muted\">Software Developer</div>\n            </span>\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"#works\">Works</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"#contact\">Contact</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","const projects = [\n  {\n    title: 'Motor Part Picker',\n    source: '#',\n    description:\n      'A website that helps users build a motorbike by choosing various parts and also view community builds for inspiration.',\n    imageSrc: '../../images/mpp.jpg',\n    role: 'Junior Developer',\n    tech: [\n      'javascript-plain colored',\n      'react-original-wordmark colored',\n      'css3-plain-wordmark colored',\n      'sass-original colored',\n      'github-plain-wordmark colored',\n    ],\n    otherTech: ['Redux', 'Firebase DB'],\n  },\n];\n\nexport default projects;\n","import React, { Component } from 'react';\nimport {\n  Card,\n  CardImg,\n  CardTitle,\n  CardText,\n  CardSubtitle,\n  CardBody } from 'reactstrap';\nimport './Projects.css';\nimport projects from '../../data/projects';\n\nclass Projects extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      proj: JSON.parse(JSON.stringify(projects)),\n    };\n  }\n\n  render() {\n    const project = this.state.proj;\n    console.log(project[0].imageSrc);\n\n    return (\n      <Card>\n        <CardImg top width=\"100%\" src={project.imageSrc} alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle id=\"project-link\"><a href={'source'}>{'title'}</a></CardTitle>\n          <CardSubtitle className=\"text-muted\">{project.role}</CardSubtitle>\n          <CardText>\n            {project.description}\n            <br />\n            <br />\n            <span className=\"tech-dev-icons\">\n              <span className=\"text-muted\">built with {' '}</span>\n              <br />\n              <span id=\"dev-icons\">\n                { project.map((e) => e.tech.map((techs) => <span className={`devicon-${techs}`} />)) }\n              </span>\n              <span id=\"no-dev-icons\">\n              {/* {project.map((e) => {\n                return {e.otherTech.map((otherTechs) => {\n                  return <span>{`${otherTechs}`}</span>;\n                }).join(', ')}\n              })} */}\n              </span>\n            </span>\n          </CardText>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport { \n  Col, \n  Button, \n  Form, \n  FormGroup, \n  Label, \n  Input, \n  FormText } from 'reactstrap';\nimport './Contact.css';\n\nexport default class Contact extends Component {\n  render() {\n    return (\n      <Form action=\"https://formspree.io/bprudew@gmail.com\" method=\"POST\">\n        <FormGroup>\n          <Label for=\"contact-form-email\">Email</Label>\n          <Input type=\"email\" name=\"email\" id=\"contact-email\" placeholder=\"Enter your email here\" /> \n          <Input type=\"hidden\" name=\"_subject\" id=\"_subject\" value=\"Github Contact Form\" />    \n        </FormGroup>\n        <FormGroup>\n          <Label for=\"contact-form-message\">Message</Label>\n          <Input type=\"textarea\" name=\"text\" id=\"contact-message\" placeholder=\"Enter your message here\" />\n        </FormGroup>\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}","import React from 'react';\nimport './Main.css';\nimport Projects from '../Projects/Projects';\nimport projects from '../../data/projects';\nimport Contact from '../Contact/Contact';\n\nconst Main = () => (\n  <div className=\"site-content\">\n    <div className=\"works\">\n      <h2><a href=\"#works\">Works</a><hr /></h2>\n    </div>\n    <div className=\"project-group\">\n      {projects.map(p => (\n        <Projects key={p.title} proj={p} />))}\n    </div>\n    <div className=\"contact\">\n      <h2><a href=\"#contact\">Contact Me</a><hr /></h2>\n      <Contact />\n    </div>\n  </div>\n);\n\nexport default Main;\n","export const socialButtons = [\n\t{\n\t\tlink: \"#github\",\n\t\ttype: \"fab\",\n\t\tname: \"github-alt\",\n\t\ttitle: \"Github\"\n\t},\n\t{\n\t\tlink: \"#linkedin\",\n\t\ttype: \"fab\",\n\t\tname: \"linkedin-in\",\n\t\ttitle: \"Linkedin\"\n\t},\n\t{\n\t\tlink: \"#email\",\n\t\ttype: \"far\",\n\t\tname: \"envelope\",\n\t\ttitle: \"Email\"\n\t}\n];\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport './Footer.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\nimport { socialButtons } from '../../data/social-media-icons';\nlibrary.add( fab, far );\n\nexport default class Footer extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Container fluid className='site-footer'>\n        <div id=\"social-media\" className=\"fa-2x\">\n          {socialButtons.map(socialButton => {\n            return <a href={socialButton.link}>\n            <FontAwesomeIcon className=\"social-media-icons\" key={socialButton.name} icon={[`${socialButton.type}`, `${socialButton.name}`]} />\n            </a>;\n          })}\n        </div>\n        <div><span id=\"credit\">2018&nbsp;&nbsp;&nbsp;</span></div>\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\n\nconst App = () => (\n  <body className=\"site\">\n    <Header />\n    <Main />\n    <Footer />\n  </body>\n);\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}